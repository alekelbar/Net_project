/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package net_streaming_cv;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import javax.swing.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author INTEL
 */
public class ClientForm extends javax.swing.JFrame {

    /**
     * Creates new form ClientForm
     */
    private boolean auth;
    private Socket client;
    private ArrayList<String> avaible_stock;
    private DefaultListModel<String> model;
    public String hostname;

    public ClientForm() {
        this.hostname = "";
        initComponents();
        this.avaible_stock = new ArrayList<>();
        this.jList_video.setVisible(false);
        this.model = new DefaultListModel<>();
        Loading.setVisible(false);
    }

    void setClient(Socket socket) {
        this.client = socket;
    }

    void reconectar() {
        String hostname = "";
        do {
            hostname = JOptionPane.showInputDialog("ingrese un host valido");
            if (hostname == null) {
                hostname = "";
            }
        } while (hostname.isEmpty());

        System.out.println("hostname futuro..." + hostname);
        try {
            // realizar la conexión de prueba... ¡Que miedo gente!
            this.hostname = hostname;
            client = new Socket(hostname, 8000);
            this.setClient(client);
            DataOutputStream output = new DataOutputStream(client.getOutputStream());
            output.writeUTF("start");
            output.flush();

            // recibir la respuesta...
            DataInputStream input = new DataInputStream(client.getInputStream());
            String status = input.readUTF();
            this.label_status.setText("Servidor: " + status);

            this.updateStock(output, input);
        } catch (IOException ex) {
            this.label_status.setText("Servidor: Inactivo");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        root = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        login_panel = new javax.swing.JPanel();
        txt_username = new javax.swing.JTextField();
        txt_password = new javax.swing.JTextField();
        btn_regis = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        btn_AuthUser = new javax.swing.JButton();
        btn_actualizar = new javax.swing.JButton();
        btn_Upload = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        btn_Visualizar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        label_status = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList_video = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        Loading = new javax.swing.JLabel();
        video_label = new javax.swing.JPanel();
        lbl_video = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(57, 62, 70));
        setBounds(new java.awt.Rectangle(0, 0, 1000, 720));

        root.setBackground(new java.awt.Color(57, 62, 70));

        jPanel1.setBackground(new java.awt.Color(57, 62, 70));

        login_panel.setBackground(new java.awt.Color(57, 62, 70));

        txt_username.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_username.setToolTipText("username");
        txt_username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_usernameActionPerformed(evt);
            }
        });

        txt_password.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_password.setToolTipText("password");
        txt_password.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_passwordActionPerformed(evt);
            }
        });

        btn_regis.setBackground(new java.awt.Color(57, 62, 70));
        btn_regis.setFont(new java.awt.Font("Fira Code SemiBold", 1, 18)); // NOI18N
        btn_regis.setForeground(new java.awt.Color(255, 255, 255));
        btn_regis.setText("Registrarse");
        btn_regis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_regisActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Fira Code", 0, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 173, 181));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("LOGIN");

        jLabel14.setFont(new java.awt.Font("Fira Code SemiBold", 0, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 173, 181));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Username");

        btn_AuthUser.setBackground(new java.awt.Color(57, 62, 70));
        btn_AuthUser.setFont(new java.awt.Font("Fira Code SemiBold", 1, 18)); // NOI18N
        btn_AuthUser.setForeground(new java.awt.Color(255, 255, 255));
        btn_AuthUser.setText("Autenticar");
        btn_AuthUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_AuthUserActionPerformed(evt);
            }
        });

        btn_actualizar.setBackground(new java.awt.Color(57, 62, 70));
        btn_actualizar.setFont(new java.awt.Font("Fira Code SemiBold", 1, 18)); // NOI18N
        btn_actualizar.setForeground(new java.awt.Color(255, 255, 255));
        btn_actualizar.setText("Actualizar Stock");
        btn_actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_actualizarActionPerformed(evt);
            }
        });

        btn_Upload.setBackground(new java.awt.Color(57, 62, 70));
        btn_Upload.setFont(new java.awt.Font("Fira Code SemiBold", 1, 18)); // NOI18N
        btn_Upload.setForeground(new java.awt.Color(255, 255, 255));
        btn_Upload.setText("Subir");
        btn_Upload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_UploadActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Fira Code SemiBold", 0, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 173, 181));
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("Password");

        btn_Visualizar.setBackground(new java.awt.Color(57, 62, 70));
        btn_Visualizar.setFont(new java.awt.Font("Fira Code SemiBold", 1, 18)); // NOI18N
        btn_Visualizar.setForeground(new java.awt.Color(255, 255, 255));
        btn_Visualizar.setText("Visualizar");
        btn_Visualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_VisualizarActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(57, 62, 70));
        jButton1.setFont(new java.awt.Font("Fira Code", 0, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Reconectar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout login_panelLayout = new javax.swing.GroupLayout(login_panel);
        login_panel.setLayout(login_panelLayout);
        login_panelLayout.setHorizontalGroup(
            login_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(login_panelLayout.createSequentialGroup()
                .addGroup(login_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(login_panelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(login_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txt_username)
                            .addComponent(txt_password)
                            .addComponent(btn_AuthUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_actualizar, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                            .addComponent(btn_regis, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_Upload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_Visualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        login_panelLayout.setVerticalGroup(
            login_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(login_panelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel14)
                .addGap(7, 7, 7)
                .addComponent(txt_username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_AuthUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_regis, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_Upload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_Visualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_actualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        label_status.setFont(new java.awt.Font("Fira Code", 0, 18)); // NOI18N
        label_status.setForeground(new java.awt.Color(0, 173, 181));
        label_status.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        label_status.setText("Servidor:");

        jPanel2.setBackground(new java.awt.Color(135, 135, 135));

        jList_video.setFont(new java.awt.Font("Fira Code", 0, 18)); // NOI18N
        jList_video.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jList_video.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(jList_video);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 173, 181));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("STOCK DE VIDEO DISPONIBLES");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 634, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addComponent(Loading)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(login_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label_status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(login_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_status)
                .addGap(18, 18, 18)
                .addComponent(Loading))
        );

        javax.swing.GroupLayout video_labelLayout = new javax.swing.GroupLayout(video_label);
        video_label.setLayout(video_labelLayout);
        video_labelLayout.setHorizontalGroup(
            video_labelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(video_labelLayout.createSequentialGroup()
                .addComponent(lbl_video, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        video_labelLayout.setVerticalGroup(
            video_labelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbl_video, javax.swing.GroupLayout.DEFAULT_SIZE, 553, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout rootLayout = new javax.swing.GroupLayout(root);
        root.setLayout(rootLayout);
        rootLayout.setHorizontalGroup(
            rootLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(video_label, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        rootLayout.setVerticalGroup(
            rootLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rootLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(video_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(root, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(root, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_regisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_regisActionPerformed
        if (client != null) {
            AuthForm auth_form = new AuthForm(this, true);
            auth_form.setClient(client);
            auth_form.setVisible(true);
        }
    }//GEN-LAST:event_btn_regisActionPerformed

    private void txt_passwordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_passwordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_passwordActionPerformed

    private void txt_usernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_usernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_usernameActionPerformed

    private void btn_AuthUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_AuthUserActionPerformed
        // TODO add your handling code here: Codigo para conectar con el servidor...
        String username = txt_username.getText(), password = txt_password.getText();
        if (!username.isEmpty() && !password.isEmpty()) {
            try {
                DataOutputStream output = new DataOutputStream(client.getOutputStream());
                output.writeUTF("login");
                output.flush();

                //
                DataInputStream input = new DataInputStream(client.getInputStream());
                String string = input.readUTF();

                if (string.equals("continue")) {
                    output.writeUTF(username + ":" + password);
                    output.flush();

                    String response = input.readUTF();
                    if (response.equals("Acepted")) {
                        this.auth = true;
                        this.btn_regis.setEnabled(false);
                        this.jList_video.setVisible(true);
                        this.txt_password.setEditable(false);
                        this.txt_username.setEditable(false);
                        this.btn_AuthUser.setEnabled(false);
                    } else {
                        JOptionPane.showMessageDialog(null, "El usuario no corresponde a ninguno registrado...");
                    }
                }
            } catch (IOException ex) {
                System.out.println("ex: " + ex.getMessage());
            }

        } else {
            JOptionPane.showMessageDialog(null, "Todos los campos son requeridos.");
        }

    }//GEN-LAST:event_btn_AuthUserActionPerformed

    private void btn_actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_actualizarActionPerformed
        try {
            DataOutputStream output = new DataOutputStream(client.getOutputStream());
            DataInputStream input = new DataInputStream(client.getInputStream());
            updateStock(output, input);

        } catch (IOException ex) {
            System.out.println("EX: " + ex.getMessage());
        }
    }//GEN-LAST:event_btn_actualizarActionPerformed

    private void btn_UploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_UploadActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:

        if (auth) {
            // Subir un archivo de video al servidor
            File selectedVideo;
            JFileChooser contextualMenuFile = new JFileChooser();

            // Agregando un filtro
            contextualMenuFile.setAcceptAllFileFilterUsed(false);
            FileNameExtensionFilter filter = new FileNameExtensionFilter("MP4 file", "mp4", "mp4");
            contextualMenuFile.addChoosableFileFilter(filter);

            contextualMenuFile.showOpenDialog(this);
            selectedVideo = contextualMenuFile.getSelectedFile();

            this.Loading.setVisible(true);
            this.btn_Upload.setEnabled(false);

            // Creando un lector de archivos
            if (selectedVideo != null) {
                DataOutputStream output = null;
                // mandar la instrucción ....
                try {
                    output = new DataOutputStream(client.getOutputStream());
                    output.writeUTF("upload:" + selectedVideo.getName());
                    output.flush();

                    // procesar el archivo ....
                    // Cuando se cierre el socket, esta opci�n hara que el cierre se
                    // retarde automaticamente hasta 10 segundos dando tiempo al cliente
                    // a leer los datos.
                    client.setSoLinger(true, 3);

                    // obtener y enviar el video...
                    boolean lastSend = false;
                    // Se abre el fichero de origen
                    FileInputStream file_org = new FileInputStream(selectedVideo);

                    // doy nombre al fichero
                    TakeVideoMessage video_message = new TakeVideoMessage();
                    video_message.FileName = selectedVideo.getName();

                    // Se leen los primeros bytes del fichero en un campo del mensaje
                    // Conforme se van leyendo el puntero al ultimo byte se va moviendo...
                    int leidos = file_org.read(video_message.FileContent);

                    // lector de objetos...
                    ObjectOutputStream obj_output = new ObjectOutputStream(client.getOutputStream());

                    // si leidos es un -1, significa EOF
                    System.out.println("Los bytes leidos fueron: " + leidos);
                    while (leidos > -1) {
                        video_message.ValidBytes = leidos;

                        // Si no se han leido el maximo de bytes, es porque el fichero
                        // se ha acabado y este es el ultimo mensaje
                        if (leidos < video_message.MAX_SIZE) {
                            video_message.LastMessage = true;
                            lastSend = true;
                        } else {
                            video_message.LastMessage = false;
                        }

                        // Se envia por el socket
                        obj_output.writeObject(video_message);
                        obj_output.flush();

                        // Si es el �ltimo mensaje, salimos del bucle.
                        if (video_message.LastMessage) {
                            break;
                        }

                        // Se crea un nuevo mensaje
                        video_message = new TakeVideoMessage();
                        video_message.FileName = selectedVideo.getName();

                        // y se leen sus bytes.
                        leidos = file_org.read(video_message.FileContent);
                    }

                    if (lastSend == false) {
                        video_message.LastMessage = true;
                        video_message.ValidBytes = 0;
                        obj_output.writeObject(video_message);
                        obj_output.flush();
                    }
                    file_org.close();

                    DataInputStream input;
                    try {
                        // Probar conexión...
                        input = new DataInputStream(client.getInputStream());

                    } catch (IOException ex) {

                        System.out.println("Reconectando....");
                        this.client = new Socket(hostname, 8000);
                        input = new DataInputStream(client.getInputStream());
                        output.writeUTF("start");
                        output.flush();
                        input.readUTF();
                        this.updateStock(output, input);
                    }

                } catch (IOException ex) {
                    System.out.println("Excepción de la subida de video...: " + ex.getMessage());
                }
                this.Loading.setVisible(false);
                this.btn_Upload.setEnabled(true);
                JOptionPane.showMessageDialog(null, "¡Video subido al servidor! Actualice su stock");
            }
            this.btn_Upload.setEnabled(true);
        }
    }//GEN-LAST:event_btn_UploadActionPerformed

    private void btn_VisualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_VisualizarActionPerformed
        DataInputStream input = null;
        DataOutputStream output = null;
        ObjectInputStream input_obj = null;
        try {
            // obtener un recurso de video.
            // TODO add your handling code here:
            String value = this.jList_video.getSelectedValue();
            if(value == null){
                return;
            }
            
            System.out.println("Value: " + value);
            input = new DataInputStream(client.getInputStream());
            output = new DataOutputStream(client.getOutputStream());
            
            System.out.println("Se envia: " + value);
            output.writeUTF("watch:" + value);
            output.flush();

            input_obj = new ObjectInputStream(client.getInputStream());

            // objecto para alogar el frame
            GetVideoMessage messageObject = new GetVideoMessage();
            
            //leeo el video...
            while (true) {
                System.out.println("Entramos: Desde el cliente recibiendo...");
                Object aux = input_obj.readObject();

                if (aux instanceof GetVideoMessage) {
                    messageObject = (GetVideoMessage) aux;
                    lbl_video.setIcon(messageObject.imgDataScaled);
                    if (messageObject.lastFrame) {
                        break;
                    }
                }

            }

        } catch (IOException ex) {
            Logger.getLogger(ClientForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ClientForm.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                input.close();
            } catch (IOException ex) {
                Logger.getLogger(ClientForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btn_VisualizarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.reconectar();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            ClientForm form = new ClientForm();
            form.setResizable(false);
            form.setVisible(true);
            // Hacer la conexión con el servidor...
            Socket client = null;
            // Pedir la info del host...
            form.reconectar();
        });

    }

    void updateStock(DataOutputStream output, DataInputStream input) {
        try {
            //definir stock...
            output.writeUTF("stock");
            output.flush();

            // recibir la data
            String stock_string = input.readUTF();

            //Operacion de integracion...
            String[] array_aux = stock_string.split(":");
            System.out.println("stock string: " + stock_string);

            avaible_stock.clear(); // limpiar

            for (String aux : array_aux) {
                avaible_stock.add(aux);
            }

            // definir el jlist..
            this.model.removeAllElements(); // limpiarlo...
            jList_video.setModel(model);

            for (String string : avaible_stock) {
                model.addElement(string);
            }

        } catch (IOException ex) {
            System.out.println("ex: " + ex.getMessage());
        }

    }

    JLabel getStatus() {
        return this.label_status;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Loading;
    private javax.swing.JButton btn_AuthUser;
    private javax.swing.JButton btn_Upload;
    private javax.swing.JButton btn_Visualizar;
    private javax.swing.JButton btn_actualizar;
    private javax.swing.JButton btn_regis;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JList<String> jList_video;
    public javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JLabel label_status;
    private javax.swing.JLabel lbl_video;
    private javax.swing.JPanel login_panel;
    private javax.swing.JPanel root;
    private javax.swing.JTextField txt_password;
    private javax.swing.JTextField txt_username;
    private javax.swing.JPanel video_label;
    // End of variables declaration//GEN-END:variables
}
